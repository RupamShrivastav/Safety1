// Generated by view binder compiler. Do not edit!
package com.example.safety.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.safety.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRegisterUserBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final MaterialButton RegisterBtn;

  @NonNull
  public final ImageView backToNepLL;

  @NonNull
  public final ImageView backToNumberLL;

  @NonNull
  public final LinearLayout cvImage;

  @NonNull
  public final LinearLayout mainContent;

  @NonNull
  public final LinearLayout nepLL;

  @NonNull
  public final FloatingActionButton nextToNumberLL;

  @NonNull
  public final FloatingActionButton nextToPinLL;

  @NonNull
  public final LinearLayout numberLL;

  @NonNull
  public final TextInputEditText phoneNumber;

  @NonNull
  public final TextInputLayout phoneNumberLayout;

  @NonNull
  public final EditText pin1;

  @NonNull
  public final EditText pin2;

  @NonNull
  public final EditText pin3;

  @NonNull
  public final EditText pin4;

  @NonNull
  public final EditText pin5;

  @NonNull
  public final LinearLayout pinContainer;

  @NonNull
  public final LinearLayout pinLL;

  @NonNull
  public final CircularProgressIndicator progressBar;

  @NonNull
  public final CardView registrationCV;

  @NonNull
  public final TextView tVAlreadyReg;

  @NonNull
  public final TextInputLayout tilName;

  @NonNull
  public final TextInputLayout tilOrganization;

  @NonNull
  public final TextInputLayout tilemail;

  @NonNull
  public final TextInputLayout tilpassword;

  @NonNull
  public final TextInputEditText trustedContactNumber;

  private ActivityRegisterUserBinding(@NonNull FrameLayout rootView,
      @NonNull MaterialButton RegisterBtn, @NonNull ImageView backToNepLL,
      @NonNull ImageView backToNumberLL, @NonNull LinearLayout cvImage,
      @NonNull LinearLayout mainContent, @NonNull LinearLayout nepLL,
      @NonNull FloatingActionButton nextToNumberLL, @NonNull FloatingActionButton nextToPinLL,
      @NonNull LinearLayout numberLL, @NonNull TextInputEditText phoneNumber,
      @NonNull TextInputLayout phoneNumberLayout, @NonNull EditText pin1, @NonNull EditText pin2,
      @NonNull EditText pin3, @NonNull EditText pin4, @NonNull EditText pin5,
      @NonNull LinearLayout pinContainer, @NonNull LinearLayout pinLL,
      @NonNull CircularProgressIndicator progressBar, @NonNull CardView registrationCV,
      @NonNull TextView tVAlreadyReg, @NonNull TextInputLayout tilName,
      @NonNull TextInputLayout tilOrganization, @NonNull TextInputLayout tilemail,
      @NonNull TextInputLayout tilpassword, @NonNull TextInputEditText trustedContactNumber) {
    this.rootView = rootView;
    this.RegisterBtn = RegisterBtn;
    this.backToNepLL = backToNepLL;
    this.backToNumberLL = backToNumberLL;
    this.cvImage = cvImage;
    this.mainContent = mainContent;
    this.nepLL = nepLL;
    this.nextToNumberLL = nextToNumberLL;
    this.nextToPinLL = nextToPinLL;
    this.numberLL = numberLL;
    this.phoneNumber = phoneNumber;
    this.phoneNumberLayout = phoneNumberLayout;
    this.pin1 = pin1;
    this.pin2 = pin2;
    this.pin3 = pin3;
    this.pin4 = pin4;
    this.pin5 = pin5;
    this.pinContainer = pinContainer;
    this.pinLL = pinLL;
    this.progressBar = progressBar;
    this.registrationCV = registrationCV;
    this.tVAlreadyReg = tVAlreadyReg;
    this.tilName = tilName;
    this.tilOrganization = tilOrganization;
    this.tilemail = tilemail;
    this.tilpassword = tilpassword;
    this.trustedContactNumber = trustedContactNumber;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRegisterUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRegisterUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_register_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRegisterUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.RegisterBtn;
      MaterialButton RegisterBtn = ViewBindings.findChildViewById(rootView, id);
      if (RegisterBtn == null) {
        break missingId;
      }

      id = R.id.backToNepLL;
      ImageView backToNepLL = ViewBindings.findChildViewById(rootView, id);
      if (backToNepLL == null) {
        break missingId;
      }

      id = R.id.backToNumberLL;
      ImageView backToNumberLL = ViewBindings.findChildViewById(rootView, id);
      if (backToNumberLL == null) {
        break missingId;
      }

      id = R.id.cvImage;
      LinearLayout cvImage = ViewBindings.findChildViewById(rootView, id);
      if (cvImage == null) {
        break missingId;
      }

      id = R.id.mainContent;
      LinearLayout mainContent = ViewBindings.findChildViewById(rootView, id);
      if (mainContent == null) {
        break missingId;
      }

      id = R.id.nepLL;
      LinearLayout nepLL = ViewBindings.findChildViewById(rootView, id);
      if (nepLL == null) {
        break missingId;
      }

      id = R.id.nextToNumberLL;
      FloatingActionButton nextToNumberLL = ViewBindings.findChildViewById(rootView, id);
      if (nextToNumberLL == null) {
        break missingId;
      }

      id = R.id.nextToPinLL;
      FloatingActionButton nextToPinLL = ViewBindings.findChildViewById(rootView, id);
      if (nextToPinLL == null) {
        break missingId;
      }

      id = R.id.numberLL;
      LinearLayout numberLL = ViewBindings.findChildViewById(rootView, id);
      if (numberLL == null) {
        break missingId;
      }

      id = R.id.phoneNumber;
      TextInputEditText phoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (phoneNumber == null) {
        break missingId;
      }

      id = R.id.phoneNumberLayout;
      TextInputLayout phoneNumberLayout = ViewBindings.findChildViewById(rootView, id);
      if (phoneNumberLayout == null) {
        break missingId;
      }

      id = R.id.pin1;
      EditText pin1 = ViewBindings.findChildViewById(rootView, id);
      if (pin1 == null) {
        break missingId;
      }

      id = R.id.pin2;
      EditText pin2 = ViewBindings.findChildViewById(rootView, id);
      if (pin2 == null) {
        break missingId;
      }

      id = R.id.pin3;
      EditText pin3 = ViewBindings.findChildViewById(rootView, id);
      if (pin3 == null) {
        break missingId;
      }

      id = R.id.pin4;
      EditText pin4 = ViewBindings.findChildViewById(rootView, id);
      if (pin4 == null) {
        break missingId;
      }

      id = R.id.pin5;
      EditText pin5 = ViewBindings.findChildViewById(rootView, id);
      if (pin5 == null) {
        break missingId;
      }

      id = R.id.pinContainer;
      LinearLayout pinContainer = ViewBindings.findChildViewById(rootView, id);
      if (pinContainer == null) {
        break missingId;
      }

      id = R.id.pinLL;
      LinearLayout pinLL = ViewBindings.findChildViewById(rootView, id);
      if (pinLL == null) {
        break missingId;
      }

      id = R.id.progressBar;
      CircularProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.registrationCV;
      CardView registrationCV = ViewBindings.findChildViewById(rootView, id);
      if (registrationCV == null) {
        break missingId;
      }

      id = R.id.tV_alreadyReg;
      TextView tVAlreadyReg = ViewBindings.findChildViewById(rootView, id);
      if (tVAlreadyReg == null) {
        break missingId;
      }

      id = R.id.tilName;
      TextInputLayout tilName = ViewBindings.findChildViewById(rootView, id);
      if (tilName == null) {
        break missingId;
      }

      id = R.id.tilOrganization;
      TextInputLayout tilOrganization = ViewBindings.findChildViewById(rootView, id);
      if (tilOrganization == null) {
        break missingId;
      }

      id = R.id.tilemail;
      TextInputLayout tilemail = ViewBindings.findChildViewById(rootView, id);
      if (tilemail == null) {
        break missingId;
      }

      id = R.id.tilpassword;
      TextInputLayout tilpassword = ViewBindings.findChildViewById(rootView, id);
      if (tilpassword == null) {
        break missingId;
      }

      id = R.id.trustedContactNumber;
      TextInputEditText trustedContactNumber = ViewBindings.findChildViewById(rootView, id);
      if (trustedContactNumber == null) {
        break missingId;
      }

      return new ActivityRegisterUserBinding((FrameLayout) rootView, RegisterBtn, backToNepLL,
          backToNumberLL, cvImage, mainContent, nepLL, nextToNumberLL, nextToPinLL, numberLL,
          phoneNumber, phoneNumberLayout, pin1, pin2, pin3, pin4, pin5, pinContainer, pinLL,
          progressBar, registrationCV, tVAlreadyReg, tilName, tilOrganization, tilemail,
          tilpassword, trustedContactNumber);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
