// Generated by view binder compiler. Do not edit!
package com.example.safety.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.safety.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateNameDialogBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton cancelBtn;

  @NonNull
  public final TextView currentName;

  @NonNull
  public final MaterialButton updateNameBtn;

  @NonNull
  public final TextInputLayout updatedFullName;

  private UpdateNameDialogBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton cancelBtn, @NonNull TextView currentName,
      @NonNull MaterialButton updateNameBtn, @NonNull TextInputLayout updatedFullName) {
    this.rootView = rootView;
    this.cancelBtn = cancelBtn;
    this.currentName = currentName;
    this.updateNameBtn = updateNameBtn;
    this.updatedFullName = updatedFullName;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateNameDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateNameDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_name_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateNameDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelBtn;
      MaterialButton cancelBtn = ViewBindings.findChildViewById(rootView, id);
      if (cancelBtn == null) {
        break missingId;
      }

      id = R.id.currentName;
      TextView currentName = ViewBindings.findChildViewById(rootView, id);
      if (currentName == null) {
        break missingId;
      }

      id = R.id.updateNameBtn;
      MaterialButton updateNameBtn = ViewBindings.findChildViewById(rootView, id);
      if (updateNameBtn == null) {
        break missingId;
      }

      id = R.id.updatedFullName;
      TextInputLayout updatedFullName = ViewBindings.findChildViewById(rootView, id);
      if (updatedFullName == null) {
        break missingId;
      }

      return new UpdateNameDialogBinding((MaterialCardView) rootView, cancelBtn, currentName,
          updateNameBtn, updatedFullName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
