// Generated by view binder compiler. Do not edit!
package com.example.safety.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.safety.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateSecurityPinDialogBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton cancelPINBtn;

  @NonNull
  public final Spinner dropDownSpinner;

  @NonNull
  public final TextInputLayout newPIN;

  @NonNull
  public final TextInputLayout oldPIN;

  @NonNull
  public final TextInputLayout oldPassword;

  @NonNull
  public final MaterialButton updatePINBtn;

  private UpdateSecurityPinDialogBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton cancelPINBtn, @NonNull Spinner dropDownSpinner,
      @NonNull TextInputLayout newPIN, @NonNull TextInputLayout oldPIN,
      @NonNull TextInputLayout oldPassword, @NonNull MaterialButton updatePINBtn) {
    this.rootView = rootView;
    this.cancelPINBtn = cancelPINBtn;
    this.dropDownSpinner = dropDownSpinner;
    this.newPIN = newPIN;
    this.oldPIN = oldPIN;
    this.oldPassword = oldPassword;
    this.updatePINBtn = updatePINBtn;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateSecurityPinDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateSecurityPinDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_security_pin_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateSecurityPinDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelPINBtn;
      MaterialButton cancelPINBtn = ViewBindings.findChildViewById(rootView, id);
      if (cancelPINBtn == null) {
        break missingId;
      }

      id = R.id.dropDownSpinner;
      Spinner dropDownSpinner = ViewBindings.findChildViewById(rootView, id);
      if (dropDownSpinner == null) {
        break missingId;
      }

      id = R.id.newPIN;
      TextInputLayout newPIN = ViewBindings.findChildViewById(rootView, id);
      if (newPIN == null) {
        break missingId;
      }

      id = R.id.oldPIN;
      TextInputLayout oldPIN = ViewBindings.findChildViewById(rootView, id);
      if (oldPIN == null) {
        break missingId;
      }

      id = R.id.oldPassword;
      TextInputLayout oldPassword = ViewBindings.findChildViewById(rootView, id);
      if (oldPassword == null) {
        break missingId;
      }

      id = R.id.updatePINBtn;
      MaterialButton updatePINBtn = ViewBindings.findChildViewById(rootView, id);
      if (updatePINBtn == null) {
        break missingId;
      }

      return new UpdateSecurityPinDialogBinding((MaterialCardView) rootView, cancelPINBtn,
          dropDownSpinner, newPIN, oldPIN, oldPassword, updatePINBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
